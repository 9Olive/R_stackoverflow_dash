count_my_change(dollars = c(5, 6), 7, 3, 9, NA, na.rm = T)
count_my_change(20, 1, 2, 3, 4, 5)
count_my_change(20, 1, 2, 3, 4, 5, 6)
count_my_change(20, 1, 2, 3, 4)
# function will sum extra numbers if their supplied, and value them as dollars.
count_my_change(20, 1, 2, 3, 4, 5, 6, 7, 8)
# function will sum extra numbers if their supplied, and value them as dollars.
count_my_change(20, 1, 2, 3, 4, 1, 2, 2, 1)
df1 <-data.frame(unif =runif(10), norm =rnorm(10))
df2 <-data.frame(gamma =rgamma(10, shape = 1),
beta =rbeta(10, shape1 = 5, shape2 = 1))
vec1 <-rnorm(10, mean = 10)
`%##%` <- function(df1, df2, ...) {
cbind(df1, df2, ...)
}
df1 %##% df2
df1 %##% df2 %##% vec1
cbind(cbind(df1, df2), vec1)
df1 %##% df2 %##% vec1
(df1 %##% df2) %##% vec1
vec1
(df1 %##% df2)
`%##%`(df1, df2)
`%##%`(`%##%`(df1, df2), vec1)
`%##%` <- function(df1, df2, ...) {
force(df1)
force(df2)
cbind(df1, df2, ...)
}
`%##%`(`%##%`(df1, df2), vec1)
(df1 %##% df2) %##% vec1
dfdf <- df1 %##% df2
dfdf
dfdf %##% vec1
dfdf %##% data.frame(vec1)
cbind
full_join
left_join
inner_join
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) try(df1 <- data.frame(df1))
if (!is.data.frame(df2)) try(df2 <- data.frame(df2))
cbind(df1, df2, ...)
}
(df1 %##% df2) %##% vec1
dfdf %##% data.frame(vec1)
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, ...)
}
(df1 %##% df2) %##% vec1
is.data.frame(vec1)
dfdf %##% data.frame(vec1)
(df1 %##% df2) %##% data.frame(vec1)
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, deparse.level = 0...)
}
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, deparse.level = 0, ...)
}
(df1 %##% df2) %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, deparse.level = 2, ...)
}
(df1 %##% df2) %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, make.column.names = T, ...)
}
(df1 %##% df2) %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, make.col.names = T, ...)
}
(df1 %##% df2) %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) df1 <- data.frame(df1)
if (!is.data.frame(df2)) df2 <- data.frame(df2)
cbind(df1, df2, ...)
}
(df1 %##% df2) %##% vec1
names(vec1)
dfdf %##% vec1
data.frame(df1)
data.frame(data.frame(df1))
mattt <- matrix(rnomr(10), nrow = 5)
mattt <- matrix(rnorm(10), nrow = 5)
data.frame(mattt)
mattt <- matrix(rnorm(10), nrow = 10)
data.frame(mattt)
dfdf %##% mattt
mattt <- data.frame(mattt)
dfdf %##% mattt
cbind(cbind(df1, df2), vec1)
mattt <- matrix(rnorm(10), nrow = 10)
cbind(cbind(df1, df2), mattt)
quote(vec1)
substitute(vec1)
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) names(df1) <- substitute(df1, globalenv())
if (!is.data.frame(df2)) names(df2) <- substitute(df1, globalenv())
cbind(df1, df2, ...)
}
(df1 %##% df2) %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) colnames(df1) <- substitute(df1, globalenv())
if (!is.data.frame(df2)) colnames(df2) <- substitute(df1, globalenv())
cbind(df1, df2, ...)
}
(df1 %##% df2) %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)) x <- substitute(df1, globalenv()); return(x)
if (!is.data.frame(df2)) y <- substitute(df1, globalenv()); return(y)
cbind(df1, df2, ...)
}
df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)){ x <- substitute(df1, globalenv()); return(x)}
if (!is.data.frame(df2)){ y <- substitute(df1, globalenv()); return(y)}
cbind(df1, df2, ...)
}
df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)){ x <- substitute(df1, globalenv()); return(x)}
if (!is.data.frame(df2)){ y <- substitute(df2, globalenv()); return(y)}
cbind(df1, df2, ...)
}
df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)){ x <- substitute(df1, globalenv()); return(x)}
if (!is.data.frame(df2)){ y <- substitute(df2, parent.env()); return(y)}
cbind(df1, df2, ...)
}
df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)){ x <- substitute(df1, globalenv()); return(x)}
if (!is.data.frame(df2)){ y <- substitute(df2, parent.env(globalenv())); return(y)}
cbind(df1, df2, ...)
}
df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)){ x <- substitute(df1, globalenv()); return(x)}
if (!is.data.frame(df2)){ y <- quote(df2); return(y)}
cbind(df1, df2, ...)
}
df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
if (!is.data.frame(df1)){
df1_name <- deparse(substitute(df1))
df1 <- data.frame(df1)
colnames(df1) <- df1_name
}
if (!is.data.frame(df2)){
df2_name <- deparse(substitute(df2))
df2 <- data.frame(df2)
colnames(df2) <- df2_name
}
cbind(df1, df2, ...)
}
df1 %##% df2 %##% vec1
mattt <- matrix(rnorm(20), nrow = 10)
mattt
df1 %##% df2 %##% mattt
`%##%` <- function(df1, df2, ...) {
# Check and fix column names
if (!is.data.frame(df1) & !is.matrix(df1)){
df1_name <- deparse(substitute(df1))
df1 <- data.frame(df1)
colnames(df1) <- df1_name
}
if (!is.data.frame(df2) & !is.matrix(df2)){
df2_name <- deparse(substitute(df2))
df2 <- data.frame(df2)
colnames(df2) <- df2_name
}
cbind(df1, df2, ...)
}
df1 %##% df2 %##% mattt
`%##%` <- function(df1, df2, ...) {
# Check and fix column names
if (!is.data.frame(df1)) {
df1_name <- deparse(substitute(df1))
df1 <- data.frame(df1)
if (!is.matrix(df1)) {
colnames(df1) <- df1_name
} else {
colnames(df1) <- paste0(df1_name, '_col_', seq_along(dim(df1)[2]))
}
}
if (!is.data.frame(df2)) {
df2_name <- deparse(substitute(df2))
df2 <- data.frame(df2)
if (!is.matrix(df2)) {
colnames(df2) <- df1_name
} else {
colnames(df2) <- paste0(df2_name, '_col_', seq_along(dim(df2)[2]))
}
}
cbind(df1, df2, ...)
}
df1 %##% df2 %##% vec1
`%##%` <- function(df1, df2, ...) {
# Check and fix column names
if (!is.data.frame(df1)) {
df1_name <- deparse(substitute(df1))
df1 <- data.frame(df1)
if (!is.matrix(df1)) {
colnames(df1) <- df1_name
} else {
colnames(df1) <- paste0(df1_name, '_col_', seq_along(dim(df1)[2]))
}
}
if (!is.data.frame(df2)) {
df2_name <- deparse(substitute(df2))
df2 <- data.frame(df2)
if (!is.matrix(df2)) {
colnames(df2) <- df2_name
} else {
colnames(df2) <- paste0(df2_name, '_col_', seq_along(dim(df2)[2]))
}
}
cbind(df1, df2, ...)
}
df1 %##% df2 %##% vec1
df1 %##% df2 %##% mattt
dim(data.frame(mattt))[2]
seq_along(2)
seq_len(2)
`%##%` <- function(df1, df2, ...) {
# Check and fix column names
if (!is.data.frame(df1)) {
df1_name <- deparse(substitute(df1))
df1 <- data.frame(df1)
if (!is.matrix(df1)) {
colnames(df1) <- df1_name
} else {
colnames(df1) <- paste0(df1_name, '_col_', seq_len(dim(df1)[2]))
}
}
if (!is.data.frame(df2)) {
df2_name <- deparse(substitute(df2))
df2 <- data.frame(df2)
if (!is.matrix(df2)) {
colnames(df2) <- df2_name
} else {
colnames(df2) <- paste0(df2_name, '_col_', seq_len(dim(df2)[2]))
}
}
cbind(df1, df2, ...)
}
df1 %##% df2 %##% vec1
df1 %##% df2 %##% mattt
seq_len(dim(data.frame(mattt))[2])
paste0('mattt', '_col_', seq_len(dim(data.frame(mattt))[2]))
`%##%` <- function(df1, df2, ...) {
# Check and fix column names
if (!is.data.frame(df1)) {
df1_name <- deparse(substitute(df1))
if (!is.matrix(df1)) {
df1 <- data.frame(df1)
colnames(df1) <- df1_name
} else {
df1 <- data.frame(df1)
colnames(df1) <- paste0(df1_name, '_col_', seq_len(dim(df1)[2]))
}
}
if (!is.data.frame(df2)) {
df2_name <- deparse(substitute(df2))
if (!is.matrix(df2)) {
df2 <- data.frame(df2)
colnames(df2) <- df2_name
} else {
df2 <- data.frame(df2)
colnames(df2) <- paste0(df2_name, '_col_', seq_len(dim(df2)[2]))
}
}
cbind(df1, df2, ...)
}
df1 %##% df2 %##% vec1
df1 %##% df2 %##% mattt
cbind(df1, df2, df1, df2, df1, df2)
df1 %##% df2 %##% vec1%##% df2 %##% mattt%##% df2 %##% mattt
`%##%`(df1, df2, df1, df2, df1, df2)
`%##%`(df1, df2, df1, df2, vec1, mattt)
`%##%`(df1, mattt, df2, df1, df2, vec1)
`%##%`(df1, df2, mattt, df1, df2, vec1)
`%##%` <- function(...) {
cbind(...)
}
df1 %##% df2
df1 %##% df2 %##% vec1
df1 %##% df2 %##% vec1 %##% mattt
# Even works with a matrix
mattt <- matrix(rpois(20, 10), nrow = 10)
df1 %##% df2 %##% mattt
# Even works with a matrix
df1 %##% df2 %##% vec1 %##% matrix(rpois(20, 10), nrow = 10)
library(tidyverse)
library(haven)
Titanic <- read_csv('https://www4.stat.ncsu.edu/~post/ST558/datasets/titanic.csv')
knitr::opts_chunk$set(error = T)
count_my_change <- function(dollars = 0, quarters = 0,
dimes = 0, nickels = 0,
pennies = 0, ...) {
money <- c(dollars, quarters, dimes, nickels, pennies)
# Check if supplied arg is vector
if (!is.numeric(money)) {
stop('Supply vector of numeric type for all arguments. Unsupplied arguments default to 0.')
}
# save total amount to obj
money <- sum(dollars, quarters * 0.25, dimes * 0.1, nickels * 0.05, pennies * 0.01, ...)
# return total amount in string
paste0('Your total amount is $', format(money, nsmall = 2))
}
# Quick Test
count_my_change(dollars = c(5, 6), 7, 3, 9, NA, na.rm = T)
count_my_change(20, 1, 2, 3, 4)
# function will sum extra numbers if their supplied, and value them as dollars.
count_my_change(20, 1, 2, 3, 4, 1, 2, 2, 1)
df1 <-data.frame(unif =runif(10), norm =rnorm(10))
df2 <-data.frame(gamma =rgamma(10, shape = 1),
beta =rbeta(10, shape1 = 5, shape2 = 1))
vec1 <-rnorm(10, mean = 10)
`%##%` <- function(...) {
cbind(...)
}
df1 %##% df2
df1 %##% df2 %##% vec1
# Even works with a matrix
df1 %##% df2 %##% vec1 %##% matrix(rpois(20, 10), nrow = 10)
df1 %##% 'a'
df1 %##% 'fuck'
# Using infix as a prefix
`%##%`(df1, df2, vec1)
getIQR <- function(nums, ...) {
require(dplyr)
# Test that supplied vector is numeric
if (is.numeric(nums) & is_vector(nums)) {
# generate quantiles, return iqr, and remove attributes
qnums <- quantile(nums, ...)
iqr   <- qnums[[4]] - qnums[[2]]
return(iqr)
} else if (any(class(nums) %in% c('tbl', 'data.frame', 'tbl_df'))) {
# Does table have a single column?
if (ncol(nums) == 1) {
# Save single column to obj as vector and remove attributes
nums <- nums[[1]]
# Is simplified vector numeric?
if (is.numeric(nums) & is_vector(nums)) {
# generate quantiles, return iqr, and remove attributes
qnums <- quantile(nums, ...)
iqr <- qnums[[4]] - qnums[[2]]
return(iqr)
# Error messages below for each fail `if` case.
} else {# fourth `if` statement
stop('Column not a numeric column-vector.')
}
} else {# third `if` statement
stop(paste0('Supply ', class(nums)[1],
' with single numeric column or numeric vector.'))
}
} else {# second `if` statement
stop('Supply (tibble or data.frame) with single numeric column or numeric vector.')
}
}
x      <- c(rnorm(10, mean = 10, 3), NA)
x.char <- c(rnorm(10), 'a')
x.df   <- data.frame(x = rnorm(10))
x.tbl  <- tibble(x = rnorm(10))
x.tbl2 <- tibble(x = rnorm(10), y = letters[1:10])
getIQR(x)
getIQR(x.char)
getIQR(x.tbl2)
x.tbl3 <- tibble(x = letters[1:10])
getIQR(x.tbl3)
near(getIQR(x, na.rm = T), IQR(x, na.rm = T))
near(getIQR(x.df), IQR(x.df$x))
near(getIQR(x.tbl), IQR(x.tbl$x))
Titanic %>%
select(age) %>%
getIQR(na.rm = T)
Titanic$age %>% getIQR(na.rm = T)
Titanic %>%
select(fare) %>%
getIQR(na.rm = T)
Titanic$fare %>% getIQR(na.rm = T)
Titanic %>%
select(age) %>%
getIQR(na.rm = T) %>% str()
Titanic %>%
select(age) %>%
getIQR(na.rm = T) %>% names()
getSummaries <- function(nums, ...) {
# Test that supplied vector is numeric
if (!is.numeric(nums) & !is_vector(nums)) {
stop('Supply a numeric vector only')
}
list(IQR = getIQR(nums, ...), CV = getCoefVar(nums, ...))
}
Titanic %>% select(age) %>% getSummaries(na.rm = T)
getSummaries(Titanic$age, na.rm = T)
Titanic %>% select(fare) %>% getSummaries(na.rm = T)
getSummaries(Titanic$fare, na.rm = T)
getCoefVar <- function(nums, ...) {
require(dplyr)
# Test that supplied vector is numeric
if (is.numeric(nums) & is_vector(nums)) {
# Coef of variation
sd(nums, ...) / abs(mean(nums, ...))
} else if (any(class(nums) %in% c('tbl', 'data.frame', 'tbl_df'))) {
# Does table have a single column?
if (ncol(nums) == 1) {
# Save single column to obj as vector and remove attributes
nums <- nums[[1]]
# Is simplified vector numeric?
if (is.numeric(nums) & is_vector(nums)) {
# Coef of variation
sd(nums, ...) / abs(mean(nums, ...))
# Error messages below
} else {# fourth `if` statement
stop('Column not a numeric column-vector.')
}
} else {# third `if` statement
stop(paste0('Supply ', class(nums)[1],
' with single numeric column or numeric vector.'))
}
} else {# second `if` statement
stop('Supply (tibble or data.frame) with single numeric column or numeric vector.')
}
}
Titanic %>% select(age) %>% getCoefVar(na.rm = T)
getCoefVar(Titanic$age, na.rm = T)
Titanic %>% select(fare) %>% getCoefVar(na.rm = T)
getCoefVar(Titanic$fare, na.rm = T)
getSummaries <- function(nums, ...) {
# Test that supplied vector is numeric
if (!is.numeric(nums) & !is_vector(nums)) {
stop('Supply a numeric vector only')
}
list(IQR = getIQR(nums, ...), CV = getCoefVar(nums, ...))
}
Titanic %>% select(age) %>% getSummaries(na.rm = T)
getSummaries(Titanic$age, na.rm = T)
Titanic %>% select(fare) %>% getSummaries(na.rm = T)
getSummaries(Titanic$fare, na.rm = T)
mean <- 3
mean
mean(3, 4)
mean(rnorm()
mean(rnorm())
mean(rnorm(10))
mean(rnorm(3, 4, 5))
mean(c(3, 4, 5))
mean(c(3, 4))
mean <- function(...) prints('Fuck off')
mean(3)
mean <- function(...) print('Fuck off')
mean(3)
?mean
mean
base::mean
base::sd
?sd
stats::sd <- function(...) print('Super!')
stats::sd
function(...) print('Super!')
stats::sd <- function(...) print('Super!')
dplyr::add_count <- function(...) print('Super!')
for (infile in list.files("blog/_posts/drafts/RMarkDowns", pattern="*.Rmd", full.names=TRUE)) {
outfile = paste0("blog/_posts/drafts/Staging/", sub(".Rmd$", ".md", basename(infile)))
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile)
}
}
update.packages(ask=FALSE, checkBuilt=TRUE)
?
help
?mean
Sys.which("make")
devtools::
?devtools
?mean
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
?mean
devtools::install_github('r-dbi/bigrquery')
devtools::install_github('r-dbi/bigrquery')
devtools::install_github('r-dbi/bigrquery')
remove.packages('glue')
library(glue)
devtools::install_github('r-dbi/bigrquery')
devtools::install_github('r-dbi/bigrquery')
library(glue)
?mean
?sd
library(devtools)
install.packages('usethis')
devtools::install_github('r-dbi/bigrquery')
library(bigrquery)
getwd()
setwd("~/Projects/Career/Masters in Statistics/ST558/Project 3")
